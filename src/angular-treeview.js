//@ sourceMappingURL=angular-treeview.map
// Generated by CoffeeScript 1.6.1
(function() {
  var collapseAll, directiveDefinition, directiveName, makeAllVisible, searchFunc, searchTraverse, template, updateVisibility;

  directiveName = "treeView";

  template = "<script type=\"text/ng-template\"  id=\"recursive_tree_renderer.html\">\n  <div ng-switch=\"node.nodes.length > 0\" ng-init=\"node.expanded = false\" class=\"tree-view-node\" ng-show=\"node.visible\">\n\n    <div ng-switch-when=\"true\" class=\"tree-view-parent-node\">\n      <div ng-click=\"clickParent(node)\" class=\"tree-view-parent-node-text\">\n      <span ng-class=\"{'tree-view-parent-icon-expanded': node.expanded, 'tree-view-parent-icon': !node.expanded}\">\n      </span>{{node.text}}</div>\n      <ul ng-show=\"node.expanded || node.expandedFromSearch\">\n        <li ng-repeat=\"node in node.nodes  | filter:searchFilter\" ng-include=\"'recursive_tree_renderer.html'\"></li>\n      </ul>\n    </div>\n\n    <div ng-switch-when=\"false\" class=\"tree-view-leaf-node\">\n      <div ng-click=\"select(node)\" class=\"tree-view-leaf-node-text\" ng-class=\"{'tree-view-leaf-node-selected': isSelected(node)}\">{{node.visibleText}}</div>\n    </div>\n\n  </div>\n</script>\n\n<div class=\"tree-view\">\n  <ul>\n    <li ng-repeat=\"node in rootNode\" ng-include=\"'recursive_tree_renderer.html'\"></li>\n  </ul>\n</div>";

  searchFunc = function(node, searchText) {
    if (node.searchText.search(searchText) === -1) {
      return false;
    } else {
      return true;
    }
  };

  makeAllVisible = function(node) {
    var child, _i, _len, _ref, _results;
    node.visible = true;
    if (node.nodes && node.nodes.length > 0) {
      _ref = node.nodes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        _results.push(makeAllVisible(child));
      }
      return _results;
    }
  };

  searchTraverse = function(node, searchText) {
    var child, found, _i, _len, _ref;
    node.visible = false;
    node.expandedFromSearch = false;
    if (searchFunc(node, searchText)) {
      makeAllVisible(node);
      node.expandedFromSearch = true;
      return true;
    } else if (node.nodes && node.nodes.length > 0) {
      found = false;
      _ref = node.nodes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if (searchTraverse(child, searchText)) {
          node.visible = true;
          node.expandedFromSearch = true;
          found = true;
        }
      }
      return found;
    }
  };

  updateVisibility = function(rootNode, searchText) {
    var node, _i, _j, _len, _len1, _results, _results1;
    if (!searchText) {
      _results = [];
      for (_i = 0, _len = rootNode.length; _i < _len; _i++) {
        node = rootNode[_i];
        makeAllVisible(node);
        _results.push(collapseAll(node, true));
      }
      return _results;
    } else {
      _results1 = [];
      for (_j = 0, _len1 = rootNode.length; _j < _len1; _j++) {
        node = rootNode[_j];
        _results1.push(searchTraverse(node, searchText.toLowerCase()));
      }
      return _results1;
    }
  };

  collapseAll = function(node, onlySearch) {
    var child, _i, _len, _ref, _results;
    if (onlySearch == null) {
      onlySearch = false;
    }
    if (!onlySearch) {
      node.expanded = false;
    }
    node.expandedFromSearch = false;
    if (node.nodes) {
      _ref = node.nodes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        _results.push(collapseAll(child));
      }
      return _results;
    }
  };

  directiveDefinition = {
    restrict: "A",
    scope: {
      search: "=searchModel",
      selected: "=ngModel",
      ngOnchange: "&",
      tree: "=?"
    },
    compile: function(cElement, cAttrs) {
      return {
        post: function(scope, element, attrs) {
          var initializeNode, initializeTree;
          scope.clipSize = attrs.clipSize ? parseInt(attrs.clipSize, 10) : 0;
          initializeNode = function(node) {
            var child, _i, _len, _ref, _results;
            node.visible = true;
            node.searchText = node.text.toLowerCase();
            if (!scope.clipSize || node.text.length < scope.clipSize) {
              node.visibleText = node.text;
            } else {
              node.visibleText = "" + (node.text.slice(0, scope.clipSize - 3)) + "...";
            }
            if (node.nodes && node.nodes.length > 0) {
              _ref = node.nodes;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                child = _ref[_i];
                _results.push(initializeNode(child));
              }
              return _results;
            }
          };
          initializeTree = function(tree) {
            var node, _i, _len;
            for (_i = 0, _len = tree.length; _i < _len; _i++) {
              node = tree[_i];
              initializeNode(node);
            }
            return scope.rootNode = tree;
          };
          scope.rootNode = [];
          scope.clickParent = function(node) {
            if (node.expanded) {
              return collapseAll(node);
            } else {
              return node.expanded = true;
            }
          };
          scope.$watch("search", function() {
            return updateVisibility(scope.tree, scope.search);
          });
          scope.select = function(node) {
            scope.selected = node.value || node.text;
            return scope.ngOnchange({
              value: scope.selected
            });
          };
          scope.isSelected = function(node) {
            return scope.selected === (node.value || node.text);
          };
          return scope.$watch('tree', function(tree) {
            initializeTree(scope.tree);
            return updateVisibility(scope.tree, scope.search);
          });
        }
      };
    },
    template: template
  };

  angular.module(directiveName, []).directive(directiveName, function() {
    return directiveDefinition;
  });

}).call(this);
